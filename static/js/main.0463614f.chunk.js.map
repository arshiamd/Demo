{"version":3,"sources":["components/Details.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Details","props","info","data","Mobile","location","id","features","console","log","KEY_SPECS","className","src","photo","alt","style","width","Brand","price","class","title","map","element","display","Home","card_details","values","index","key","to","pathname","App","textAlign","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wNAGe,SAASA,EAAQC,GAC5B,IAAIC,EAAKC,EAAKC,OAAOH,EAAMI,SAASF,KAAKG,IAAIC,SAE7C,OADAC,QAAQC,IAAIP,EAAKQ,WAGb,yBAAKC,UAAU,8BACZ,yBAAKA,UAAU,2BACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,yBACX,yBAAKC,IAAKV,EAAKW,MAAOC,IAAI,eAAeC,MAAO,CAACC,MAAM,SACvD,4BAAKd,EAAKe,OACV,wBAAIN,UAAU,kBAAkBT,EAAKgB,UAIjD,yBAAKP,UAAU,oCACf,yCACK,yBAAKA,UAAU,eACX,yBAAKA,UAAU,8BACX,wBAAIQ,MAAM,cACLjB,EAAKkB,MAAMC,KAAI,SAAAC,GAAO,OACnB,wBAAIH,MAAM,4BAA6BG,QAI/C,yBAAKX,UAAU,sCACX,wBAAIQ,MAAM,cAAcJ,MAAO,CAACQ,QAAQ,UACnCrB,EAAKQ,UAAUW,KAAI,SAAAC,GAAO,OACvB,wBAAIH,MAAM,4BAA6BG,WC3B5D,SAASE,IACpB,IAAIC,EAAetB,EAAKC,OAExB,OADAI,QAAQC,IAAIgB,GAER,yBAAKd,UAAU,8BACVc,EAAaJ,KACV,SAACK,EAAOC,GAAR,OACI,yBAAKhB,UAAU,2BAA2BiB,IAAKD,GAC3C,yBAAKhB,UAAU,QACX,yBAAKA,UAAU,qBACX,yBAAKC,IAAKc,EAAOnB,SAASM,MAAOF,UAAU,eAAeG,IAAI,gBAElE,yBAAKH,UAAU,yBACX,wBAAIA,UAAU,qCAAqCe,EAAOnB,SAASU,OACnE,kBAAC,IAAD,CAAMY,GAAI,CAACC,SAAS,WAAW3B,KAAK,CAACG,GAAGqB,IAAShB,UAAU,qBAA3D,uB,WCFjBoB,MAZf,WACE,OACE,yBAAKpB,UAAU,MAAMI,MAAO,CAACiB,UAAW,WAGtC,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAO,IAAIC,UAAaX,IACrC,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAO,WAAWC,UAAanC,MCE9BoC,QACW,cAA7BC,OAAOhC,SAASiC,UAEe,UAA7BD,OAAOhC,SAASiC,UAEhBD,OAAOhC,SAASiC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,a","file":"static/js/main.0463614f.chunk.js","sourcesContent":["import React from 'react'\r\nimport data from '../data.json'\r\n\r\nexport default function Details(props) {\r\n    let info=data.Mobile[props.location.data.id].features;\r\n    console.log(info.KEY_SPECS);\r\n    return (\r\n        \r\n        <div className=\"row justify-content-center\">\r\n           <div className=\"col-12 col-lg-3 my-auto\">\r\n               <div className=\"card shadow\">\r\n                   <div className=\"card-body text-center\">\r\n                       <img src={info.photo} alt=\"profile Icon\" style={{width:\"30%\"}}/>\r\n                       <h4>{info.Brand}</h4>\r\n                       <h4 className=\"text-secondary\">{info.price}</h4>\r\n                   </div>\r\n               </div>\r\n           </div>\r\n           <div className=\"col-sm-9 col-md-10 col-lg-8 m-2 \">\r\n           <h2>KEY SPECS</h2>\r\n                <div className=\"row bg-dark\">\r\n                    <div className=\"col-sm-3 col-md-4 col-lg-4\"> \r\n                        <ul class=\"list-group\">\r\n                            {info.title.map(element => (\r\n                                <l1 class=\"list-group-item bg-light\" >{element}</l1>\r\n                            ))}\r\n                        </ul>\r\n                        </div>\r\n                        <div className=\" col-12 col-sm-7 col-md-8 col-lg-8\">\r\n                            <ul class=\"list-group \" style={{display:\"block\"}}>\r\n                                {info.KEY_SPECS.map(element => (\r\n                                    <l1 class=\"list-group-item bg-light\" >{element}</l1>\r\n                                ))}\r\n                            </ul>\r\n                        </div>\r\n                       \r\n                </div>\r\n                  \r\n                      \r\n                   </div>\r\n               </div>\r\n           \r\n\r\n   )\r\n}\r\n{/* <tbody>\r\n    <tr data-nd=\"front_camera\">\r\n        <td width=\"33%\" class=\"title\">front camera</td>\r\n        <td width=\"67%\" class=\"val\">32 MP + 8 MP</td>\r\n    </tr><tr data-nd=\"battery\"><td width=\"33%\" class=\"title\">battery</td><td width=\"67%\" class=\"val\">4115 mAh</td></tr><tr data-nd=\"processor\"><td width=\"33%\" class=\"title\">processor</td><td width=\"67%\" class=\"val\">Qualcomm Snapdragon 765G</td></tr><tr data-nd=\"ram\"><td width=\"33%\" class=\"title\">ram</td><td width=\"67%\" class=\"val\">6 GB</td></tr><tr data-nd=\"rear_camera\"><td width=\"33%\" class=\"title\">rear camera</td><td width=\"67%\" class=\"val\">48 MP + 8 MP + 5 MP + 2 MP</td></tr><tr data-nd=\"display\"><td width=\"33%\" class=\"title\">display</td><td width=\"67%\" class=\"val\">6.44 inches</td></tr></tbody> */}","import React from 'react'\r\nimport data from '../data.json'\r\nimport {Link} from 'react-router-dom';\r\nimport Details from '../components/Details'\r\nexport default function Home() {\r\n    let card_details = data.Mobile;\r\n    console.log(card_details);\r\n    return (\r\n        <div className=\"row justify-content-center\"> \r\n            {card_details.map(\r\n                (values,index)=>(\r\n                    <div className=\"col-sm-6 col-md-6 mt-4  \" key={index}>\r\n                        <div className=\"card\">\r\n                            <div className=\"view overlay zoom\">\r\n                                <img src={values.features.photo} className=\"card-img-top\" alt=\"card-image\"/>\r\n                            </div>\r\n                            <div className=\"card-body text-center\">\r\n                                <h4 className=\"card-header bg-primary text-white\">{values.features.Brand}</h4> \r\n                                <Link to={{pathname:'/Details',data:{id:index}}} className=\"btn btn-dark mt-4\">View Details</Link>\r\n                            </div>     \r\n                        </div>\r\n                </div>\r\n                )\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n// import React from \"react\";\r\n// import data from '../data.json';\r\n// // import {Link} from 'react-router-dom';\r\n\r\n// let Home = () => {\r\n//     let card_details = data.Mobile;\r\n//     console.log(card_details);\r\n//     // console.log(`value of i is ${Resume()}`);\r\n//     // return (\r\n//     //     <div className=\"row justify-content-center\">\r\n//     //         {card_details.map(\r\n//     //             (values,index)=>(\r\n//     //                 <section className=\"col-lg-4 col-md-5 col-sm-10 mt-2\">\r\n//     //                     <div className=\"card\">\r\n//     //                         <article className=\"card-body\">\r\n//     //                             <img src={icon} alt=\"image\" style={{width:\"50%\"}}/>\r\n//     //                             <h1>{values.details.name}</h1>\r\n//     //                             <h3 className=\"text-secondary\">{values.details.role}</h3>\r\n//     //                             <a href={\"tel:\"+values.details.role}><h4 >{values.details.mobile}</h4></a> \r\n//     //                             <a href={\"mailto:\"+values.details.email}><h4>{values.details.email}</h4></a> \r\n//     //                             <Link to={{pathname: '/resume', data1:{id:index}}} className=\"btn btn-dark\">View Profile</Link>\r\n//     //                         </article>\r\n//     //                         <h1></h1>\r\n//     //                     </div>                      \r\n//     //                 </section>\r\n//     //             )\r\n//     //         )}\r\n//     //     </div>\r\n//     // );\r\n// }\r\n// export default Home;","import React from \"react\";\nimport Home from \"./components/Home\";\nimport Details from './components/Details';\nimport {BrowserRouter , Route} from 'react-router-dom';\nfunction App (){\n  return(\n    <div className=\"App\" style={{textAlign: \"center\"}}>\n      {/* <Home />\n        */}\n      <Route exact path = '/' component = {Home} />\n      <Route exact path = '/Details' component = {Details} />\n    </div>\n  );\n \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}